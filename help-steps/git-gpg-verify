#!/bin/bash

## Copyright (C) 2012 - 2025 ENCRYPTED SUPPORT LLC <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

set -x
set -e

true "INFO: Currently running script: $BASH_SOURCE $@"

MYDIR="$( cd -- "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd -- "$MYDIR"

dist_build_internal_run="true"

source pre
source colors
source variables

cd -- "$(dirname -- "$MYDIR")"

import_keys() {
  local key_index derivative_signing_key_fingerprint_list derivative_signing_public_key_item derivative_signing_key_fingerprint_item

  for key_index in "${!derivative_signing_public_key_list[@]}"; do
    readarray -t derivative_signing_key_fingerprint_list <<< "${derivative_signing_key_fingerprint_group_list[key_index]}"
    derivative_signing_public_key_item="${derivative_signing_public_key_list[key_index]}"

    for derivative_signing_key_fingerprint_item in "${derivative_signing_key_fingerprint_list[@]}"; do
      if ! gpg --quiet --list-keys -- "${derivative_signing_key_fingerprint_item}" &>/dev/null; then
        gpg --keyid-format long --import --import-options show-only --with-fingerprint -- "${derivative_signing_public_key_item}"
        gpg --import -- "${derivative_signing_public_key_item}"
        gpg --check-sigs -- "${derivative_signing_key_fingerprint_item}"
        break
      fi
    done
  done
}

signed_by_fingerprint() {
  local fingerprint derivative_signing_key_fingerprint_group derivative_signing_key_fingerprint_item derivative_signing_key_fingerprint_list
  fingerprint=$(git show --no-patch --pretty=format:%GF "${1}")

  for derivative_signing_key_fingerprint_group in "${derivative_signing_key_fingerprint_group_list[@]}"; do
    readarray -t derivative_signing_key_fingerprint_list <<< "${derivative_signing_key_fingerprint_group}"

    for derivative_signing_key_fingerprint_item in "${derivative_signing_key_fingerprint_list[@]}"; do
      if [ "${fingerprint}" = "${derivative_signing_key_fingerprint_item}" ]; then
        return 0
      fi
    done
  done

  error "Signing key fingerprint does not match!"
}

run_git() {
  local latest_git_tag

  if [ "$(id -u)" = "0" ]; then
    error "Do not run this as root!"
  fi
  ## only fetches tags
  git fetch https://github.com/derivative-maker/derivative-maker --depth=1 -- 'refs/tags/*:refs/tags/*'

  latest_git_tag="$(git rev-list --tags --max-count=1)"

  [ -n "${TAG}" ] || TAG="$(git describe --tags "${latest_git_tag}")"

  if [ "${TAG}" != "master" ]; then
    git verify-tag "${TAG}"
    git describe "${TAG}"
  fi

  git verify-commit "${TAG}^{commit}"

  signed_by_fingerprint "${TAG}^{commit}"

  if [ -z "$(git status --porcelain 2>/dev/null)" ]; then
    git pull
    git checkout "${TAG}"
  else
    true "INFO: Uncommitted changes found. Skipping upstream merge."
    if [ -n "${GIT}" ]; then
      ## when current tag equals desired - no switch needed
      if [[ ! "$(git describe --all 2>/dev/null)" =~ "${TAG}" ]]; then
        true "INFO: Saving current changes before switch to ${TAG}."
        git stash
        git switch --detach -- "${TAG}"
      fi
    else
        error "Use option -g|--git to proceed with uncommitted."
    fi
  fi

  git submodule sync --recursive >/dev/null

  git -c merge.verifySignatures=true submodule update --init --recursive --jobs=200 --merge >/dev/null

  git status
}

main() {
  import_key 2>&1 | tee -a -- "${HOME}/derivative-binary/logs/key.log"
  run_git 2>&1 | tee -a -- "${HOME}/derivative-binary/logs/git.log"
}

main "$@"
